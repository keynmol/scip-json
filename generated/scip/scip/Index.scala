// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scip.scip

/** Index represents a complete SCIP index for a workspace this is rooted at a
  * single directory. An Index message payload can have a large memory footprint
  * and it's therefore recommended to emit and consume an Index payload one field
  * value at a time. To permit streaming consumption of an Index payload, the
  * `metadata` field must appear at the start of the stream and must only appear
  * once in the stream. Other field values may appear in any order.
  *
  * @param metadata
  *   Metadata about this index.
  * @param documents
  *   Documents that belong to this index.
  * @param externalSymbols
  *   (optional) Symbols that are referenced from this index but are defined in
  *   an external package (a separate `Index` message). Leave this field empty
  *   if you assume the external package will get indexed separately. If the
  *   external package won't get indexed for some reason then you can use this
  *   field to provide hover documentation for those external symbols.
  */
@SerialVersionUID(0L)
final case class Index(
    metadata: _root_.scala.Option[scip.scip.Metadata] = _root_.scala.None,
    documents: _root_.scala.Seq[scip.scip.Document] = _root_.scala.Seq.empty,
    externalSymbols: _root_.scala.Seq[scip.scip.SymbolInformation] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Index] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (metadata.isDefined) {
        val __value = metadata.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      documents.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      externalSymbols.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      metadata.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      documents.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      externalSymbols.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getMetadata: scip.scip.Metadata = metadata.getOrElse(scip.scip.Metadata.defaultInstance)
    def clearMetadata: Index = copy(metadata = _root_.scala.None)
    def withMetadata(__v: scip.scip.Metadata): Index = copy(metadata = Option(__v))
    def clearDocuments = copy(documents = _root_.scala.Seq.empty)
    def addDocuments(__vs: scip.scip.Document *): Index = addAllDocuments(__vs)
    def addAllDocuments(__vs: Iterable[scip.scip.Document]): Index = copy(documents = documents ++ __vs)
    def withDocuments(__v: _root_.scala.Seq[scip.scip.Document]): Index = copy(documents = __v)
    def clearExternalSymbols = copy(externalSymbols = _root_.scala.Seq.empty)
    def addExternalSymbols(__vs: scip.scip.SymbolInformation *): Index = addAllExternalSymbols(__vs)
    def addAllExternalSymbols(__vs: Iterable[scip.scip.SymbolInformation]): Index = copy(externalSymbols = externalSymbols ++ __vs)
    def withExternalSymbols(__v: _root_.scala.Seq[scip.scip.SymbolInformation]): Index = copy(externalSymbols = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => metadata.orNull
        case 2 => documents
        case 3 => externalSymbols
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => metadata.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PRepeated(documents.iterator.map(_.toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PRepeated(externalSymbols.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: scip.scip.Index.type = scip.scip.Index
    // @@protoc_insertion_point(GeneratedMessage[scip.Index])
}

object Index extends scalapb.GeneratedMessageCompanion[scip.scip.Index] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scip.scip.Index] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scip.scip.Index = {
    var __metadata: _root_.scala.Option[scip.scip.Metadata] = _root_.scala.None
    val __documents: _root_.scala.collection.immutable.VectorBuilder[scip.scip.Document] = new _root_.scala.collection.immutable.VectorBuilder[scip.scip.Document]
    val __externalSymbols: _root_.scala.collection.immutable.VectorBuilder[scip.scip.SymbolInformation] = new _root_.scala.collection.immutable.VectorBuilder[scip.scip.SymbolInformation]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __metadata = Option(__metadata.fold(_root_.scalapb.LiteParser.readMessage[scip.scip.Metadata](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __documents += _root_.scalapb.LiteParser.readMessage[scip.scip.Document](_input__)
        case 26 =>
          __externalSymbols += _root_.scalapb.LiteParser.readMessage[scip.scip.SymbolInformation](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    scip.scip.Index(
        metadata = __metadata,
        documents = __documents.result(),
        externalSymbols = __externalSymbols.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scip.scip.Index] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      scip.scip.Index(
        metadata = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[scip.scip.Metadata]]),
        documents = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[scip.scip.Document]]).getOrElse(_root_.scala.Seq.empty),
        externalSymbols = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[scip.scip.SymbolInformation]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ScipProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ScipProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = scip.scip.Metadata
      case 2 => __out = scip.scip.Document
      case 3 => __out = scip.scip.SymbolInformation
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scip.scip.Index(
    metadata = _root_.scala.None,
    documents = _root_.scala.Seq.empty,
    externalSymbols = _root_.scala.Seq.empty
  )
  implicit class IndexLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scip.scip.Index]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scip.scip.Index](_l) {
    def metadata: _root_.scalapb.lenses.Lens[UpperPB, scip.scip.Metadata] = field(_.getMetadata)((c_, f_) => c_.copy(metadata = Option(f_)))
    def optionalMetadata: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scip.scip.Metadata]] = field(_.metadata)((c_, f_) => c_.copy(metadata = f_))
    def documents: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scip.scip.Document]] = field(_.documents)((c_, f_) => c_.copy(documents = f_))
    def externalSymbols: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scip.scip.SymbolInformation]] = field(_.externalSymbols)((c_, f_) => c_.copy(externalSymbols = f_))
  }
  final val METADATA_FIELD_NUMBER = 1
  final val DOCUMENTS_FIELD_NUMBER = 2
  final val EXTERNAL_SYMBOLS_FIELD_NUMBER = 3
  def of(
    metadata: _root_.scala.Option[scip.scip.Metadata],
    documents: _root_.scala.Seq[scip.scip.Document],
    externalSymbols: _root_.scala.Seq[scip.scip.SymbolInformation]
  ): _root_.scip.scip.Index = _root_.scip.scip.Index(
    metadata,
    documents,
    externalSymbols
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[scip.Index])
}
