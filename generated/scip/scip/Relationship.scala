// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scip.scip

/** @param isReference
  *   When resolving "Find references", this field documents what other symbols
  *   should be included together with this symbol. For example, consider the
  *   following TypeScript code that defines two symbols `Animal#sound()` and
  *   `Dog#sound()`:
  *   ```ts
  *   interface Animal {
  *             ^^^^^^ definition Animal#
  *     sound(): string
  *     ^^^^^ definition Animal#sound()
  *   }
  *   class Dog implements Animal {
  *         ^^^ definition Dog#, relationships = [{symbol: "Animal#", is_implementation: true}]
  *     public sound(): string { return "woof" }
  *            ^^^^^ definition Dog#sound(), references_symbols = Animal#sound(), relationships = [{symbol: "Animal#sound()", is_implementation:true, is_reference: true}]
  *   }
  *   const animal: Animal = new Dog()
  *                 ^^^^^^ reference Animal#
  *   console.log(animal.sound())
  *                      ^^^^^ reference Animal#sound()
  *   ```
  *   Doing "Find references" on the symbol `Animal#sound()` should return
  *   references to the `Dog#sound()` method as well. Vice-versa, doing "Find
  *   references" on the `Dog#sound()` method should include references to the
  *   `Animal#sound()` method as well.
  * @param isImplementation
  *   Similar to `is_reference` but for "Find implementations".
  *   It's common for `is_implementation` and `is_reference` to both be true but
  *   it's not always the case.
  *   In the TypeScript example above, observe that `Dog#` has an
  *   `is_implementation` relationship with `"Animal#"` but not `is_reference`.
  *   This is because "Find references" on the "Animal#" symbol should not return
  *   "Dog#".  We only want "Dog#" to return as a result for "Find
  *   implementations" on the "Animal#" symbol.
  * @param isTypeDefinition
  *   Similar to `references_symbols` but for "Go to type definition".
  * @param isDefinition
  *   Allows overriding the behavior of "Go to definition" and "Find references"
  *   for symbols which do not have a definition of their own or could
  *   potentially have multiple definitions.
  *  
  *   For example, in a language with single inheritance and no field overriding,
  *   inherited fields can reuse the same symbol as the ancestor which declares
  *   the field. In such a situation, is_definition is not needed.
  *  
  *   On the other hand, in languages with single inheritance and some form
  *   of mixins, you can use is_definition to relate the symbol to the
  *   matching symbol in ancestor classes, and is_reference to relate the
  *   symbol to the matching symbol in mixins.
  *  
  *   NOTE: At the moment, due to limitations of the SCIP to LSIF conversion,
  *   only global symbols in an index are allowed to use is_definition.
  *   The relationship may not get recorded if either symbol is local.
  *   Update registerInverseRelationships on adding a new field here.
  */
@SerialVersionUID(0L)
final case class Relationship(
    symbol: _root_.scala.Predef.String = "",
    isReference: _root_.scala.Boolean = false,
    isImplementation: _root_.scala.Boolean = false,
    isTypeDefinition: _root_.scala.Boolean = false,
    isDefinition: _root_.scala.Boolean = false,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Relationship] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = symbol
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = isReference
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(2, __value)
        }
      };
      
      {
        val __value = isImplementation
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(3, __value)
        }
      };
      
      {
        val __value = isTypeDefinition
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(4, __value)
        }
      };
      
      {
        val __value = isDefinition
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = symbol
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = isReference
        if (__v != false) {
          _output__.writeBool(2, __v)
        }
      };
      {
        val __v = isImplementation
        if (__v != false) {
          _output__.writeBool(3, __v)
        }
      };
      {
        val __v = isTypeDefinition
        if (__v != false) {
          _output__.writeBool(4, __v)
        }
      };
      {
        val __v = isDefinition
        if (__v != false) {
          _output__.writeBool(5, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withSymbol(__v: _root_.scala.Predef.String): Relationship = copy(symbol = __v)
    def withIsReference(__v: _root_.scala.Boolean): Relationship = copy(isReference = __v)
    def withIsImplementation(__v: _root_.scala.Boolean): Relationship = copy(isImplementation = __v)
    def withIsTypeDefinition(__v: _root_.scala.Boolean): Relationship = copy(isTypeDefinition = __v)
    def withIsDefinition(__v: _root_.scala.Boolean): Relationship = copy(isDefinition = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = symbol
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = isReference
          if (__t != false) __t else null
        }
        case 3 => {
          val __t = isImplementation
          if (__t != false) __t else null
        }
        case 4 => {
          val __t = isTypeDefinition
          if (__t != false) __t else null
        }
        case 5 => {
          val __t = isDefinition
          if (__t != false) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(symbol)
        case 2 => _root_.scalapb.descriptors.PBoolean(isReference)
        case 3 => _root_.scalapb.descriptors.PBoolean(isImplementation)
        case 4 => _root_.scalapb.descriptors.PBoolean(isTypeDefinition)
        case 5 => _root_.scalapb.descriptors.PBoolean(isDefinition)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: scip.scip.Relationship.type = scip.scip.Relationship
    // @@protoc_insertion_point(GeneratedMessage[scip.Relationship])
}

object Relationship extends scalapb.GeneratedMessageCompanion[scip.scip.Relationship] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scip.scip.Relationship] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scip.scip.Relationship = {
    var __symbol: _root_.scala.Predef.String = ""
    var __isReference: _root_.scala.Boolean = false
    var __isImplementation: _root_.scala.Boolean = false
    var __isTypeDefinition: _root_.scala.Boolean = false
    var __isDefinition: _root_.scala.Boolean = false
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __symbol = _input__.readStringRequireUtf8()
        case 16 =>
          __isReference = _input__.readBool()
        case 24 =>
          __isImplementation = _input__.readBool()
        case 32 =>
          __isTypeDefinition = _input__.readBool()
        case 40 =>
          __isDefinition = _input__.readBool()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    scip.scip.Relationship(
        symbol = __symbol,
        isReference = __isReference,
        isImplementation = __isImplementation,
        isTypeDefinition = __isTypeDefinition,
        isDefinition = __isDefinition,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scip.scip.Relationship] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      scip.scip.Relationship(
        symbol = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        isReference = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        isImplementation = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        isTypeDefinition = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        isDefinition = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ScipProto.javaDescriptor.getMessageTypes().get(8)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ScipProto.scalaDescriptor.messages(8)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scip.scip.Relationship(
    symbol = "",
    isReference = false,
    isImplementation = false,
    isTypeDefinition = false,
    isDefinition = false
  )
  implicit class RelationshipLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scip.scip.Relationship]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scip.scip.Relationship](_l) {
    def symbol: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.symbol)((c_, f_) => c_.copy(symbol = f_))
    def isReference: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.isReference)((c_, f_) => c_.copy(isReference = f_))
    def isImplementation: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.isImplementation)((c_, f_) => c_.copy(isImplementation = f_))
    def isTypeDefinition: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.isTypeDefinition)((c_, f_) => c_.copy(isTypeDefinition = f_))
    def isDefinition: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.isDefinition)((c_, f_) => c_.copy(isDefinition = f_))
  }
  final val SYMBOL_FIELD_NUMBER = 1
  final val IS_REFERENCE_FIELD_NUMBER = 2
  final val IS_IMPLEMENTATION_FIELD_NUMBER = 3
  final val IS_TYPE_DEFINITION_FIELD_NUMBER = 4
  final val IS_DEFINITION_FIELD_NUMBER = 5
  def of(
    symbol: _root_.scala.Predef.String,
    isReference: _root_.scala.Boolean,
    isImplementation: _root_.scala.Boolean,
    isTypeDefinition: _root_.scala.Boolean,
    isDefinition: _root_.scala.Boolean
  ): _root_.scip.scip.Relationship = _root_.scip.scip.Relationship(
    symbol,
    isReference,
    isImplementation,
    isTypeDefinition,
    isDefinition
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[scip.Relationship])
}
