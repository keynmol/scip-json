// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scip.scip

@SerialVersionUID(0L)
final case class Descriptor(
    name: _root_.scala.Predef.String = "",
    disambiguator: _root_.scala.Predef.String = "",
    suffix: scip.scip.Descriptor.Suffix = scip.scip.Descriptor.Suffix.UnspecifiedSuffix,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Descriptor] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = name
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = disambiguator
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = suffix.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(3, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = name
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = disambiguator
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = suffix.value
        if (__v != 0) {
          _output__.writeEnum(3, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withName(__v: _root_.scala.Predef.String): Descriptor = copy(name = __v)
    def withDisambiguator(__v: _root_.scala.Predef.String): Descriptor = copy(disambiguator = __v)
    def withSuffix(__v: scip.scip.Descriptor.Suffix): Descriptor = copy(suffix = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = disambiguator
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = suffix.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(name)
        case 2 => _root_.scalapb.descriptors.PString(disambiguator)
        case 3 => _root_.scalapb.descriptors.PEnum(suffix.scalaValueDescriptor)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: scip.scip.Descriptor.type = scip.scip.Descriptor
    // @@protoc_insertion_point(GeneratedMessage[scip.Descriptor])
}

object Descriptor extends scalapb.GeneratedMessageCompanion[scip.scip.Descriptor] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scip.scip.Descriptor] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scip.scip.Descriptor = {
    var __name: _root_.scala.Predef.String = ""
    var __disambiguator: _root_.scala.Predef.String = ""
    var __suffix: scip.scip.Descriptor.Suffix = scip.scip.Descriptor.Suffix.UnspecifiedSuffix
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __name = _input__.readStringRequireUtf8()
        case 18 =>
          __disambiguator = _input__.readStringRequireUtf8()
        case 24 =>
          __suffix = scip.scip.Descriptor.Suffix.fromValue(_input__.readEnum())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    scip.scip.Descriptor(
        name = __name,
        disambiguator = __disambiguator,
        suffix = __suffix,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scip.scip.Descriptor] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      scip.scip.Descriptor(
        name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        disambiguator = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        suffix = scip.scip.Descriptor.Suffix.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(scip.scip.Descriptor.Suffix.UnspecifiedSuffix.scalaValueDescriptor).number)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ScipProto.javaDescriptor.getMessageTypes().get(6)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ScipProto.scalaDescriptor.messages(6)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 3 => scip.scip.Descriptor.Suffix
    }
  }
  lazy val defaultInstance = scip.scip.Descriptor(
    name = "",
    disambiguator = "",
    suffix = scip.scip.Descriptor.Suffix.UnspecifiedSuffix
  )
  sealed abstract class Suffix(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
    type EnumType = Suffix
    def isUnspecifiedSuffix: _root_.scala.Boolean = false
    def isNamespace: _root_.scala.Boolean = false
    def isPackage: _root_.scala.Boolean = false
    def isType: _root_.scala.Boolean = false
    def isTerm: _root_.scala.Boolean = false
    def isMethod: _root_.scala.Boolean = false
    def isTypeParameter: _root_.scala.Boolean = false
    def isParameter: _root_.scala.Boolean = false
    def isMeta: _root_.scala.Boolean = false
    def isLocal: _root_.scala.Boolean = false
    def isMacro: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Suffix] = scip.scip.Descriptor.Suffix
    final def asRecognized: _root_.scala.Option[scip.scip.Descriptor.Suffix.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[scip.scip.Descriptor.Suffix.Recognized])
  }
  
  object Suffix extends _root_.scalapb.GeneratedEnumCompanion[Suffix] {
    sealed trait Recognized extends Suffix
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Suffix] = this
    
    @SerialVersionUID(0L)
    case object UnspecifiedSuffix extends Suffix(0) with Suffix.Recognized {
      val index = 0
      val name = "UnspecifiedSuffix"
      override def isUnspecifiedSuffix: _root_.scala.Boolean = true
    }
    
    /** Unit of code abstraction and/or namespacing.
      *
      * NOTE: This corresponds to a package in Go and JVM languages.
      */
    @SerialVersionUID(0L)
    case object Namespace extends Suffix(1) with Suffix.Recognized {
      val index = 1
      val name = "Namespace"
      override def isNamespace: _root_.scala.Boolean = true
    }
    
    /** Use Namespace instead.
      */
    @SerialVersionUID(0L)
    @scala.deprecated(message="Marked as deprecated in proto file", "")
    case object Package extends Suffix(1) with Suffix.Recognized {
      val index = 2
      val name = "Package"
      override def isPackage: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object Type extends Suffix(2) with Suffix.Recognized {
      val index = 3
      val name = "Type"
      override def isType: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object Term extends Suffix(3) with Suffix.Recognized {
      val index = 4
      val name = "Term"
      override def isTerm: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object Method extends Suffix(4) with Suffix.Recognized {
      val index = 5
      val name = "Method"
      override def isMethod: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object TypeParameter extends Suffix(5) with Suffix.Recognized {
      val index = 6
      val name = "TypeParameter"
      override def isTypeParameter: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object Parameter extends Suffix(6) with Suffix.Recognized {
      val index = 7
      val name = "Parameter"
      override def isParameter: _root_.scala.Boolean = true
    }
    
    /** Can be used for any purpose.
      */
    @SerialVersionUID(0L)
    case object Meta extends Suffix(7) with Suffix.Recognized {
      val index = 8
      val name = "Meta"
      override def isMeta: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object Local extends Suffix(8) with Suffix.Recognized {
      val index = 9
      val name = "Local"
      override def isLocal: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object Macro extends Suffix(9) with Suffix.Recognized {
      val index = 10
      val name = "Macro"
      override def isMacro: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends Suffix(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
    lazy val values = scala.collection.immutable.Seq(UnspecifiedSuffix, Namespace, Package, Type, Term, Method, TypeParameter, Parameter, Meta, Local, Macro)
    def fromValue(__value: _root_.scala.Int): Suffix = __value match {
      case 0 => UnspecifiedSuffix
      case 1 => Namespace
      case 2 => Type
      case 3 => Term
      case 4 => Method
      case 5 => TypeParameter
      case 6 => Parameter
      case 7 => Meta
      case 8 => Local
      case 9 => Macro
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = scip.scip.Descriptor.javaDescriptor.getEnumTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = scip.scip.Descriptor.scalaDescriptor.enums(0)
  }
  implicit class DescriptorLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scip.scip.Descriptor]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scip.scip.Descriptor](_l) {
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def disambiguator: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.disambiguator)((c_, f_) => c_.copy(disambiguator = f_))
    def suffix: _root_.scalapb.lenses.Lens[UpperPB, scip.scip.Descriptor.Suffix] = field(_.suffix)((c_, f_) => c_.copy(suffix = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val DISAMBIGUATOR_FIELD_NUMBER = 2
  final val SUFFIX_FIELD_NUMBER = 3
  def of(
    name: _root_.scala.Predef.String,
    disambiguator: _root_.scala.Predef.String,
    suffix: scip.scip.Descriptor.Suffix
  ): _root_.scip.scip.Descriptor = _root_.scip.scip.Descriptor(
    name,
    disambiguator,
    suffix
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[scip.Descriptor])
}
