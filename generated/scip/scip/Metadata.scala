// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scip.scip

/** @param version
  *   Which version of this protocol was used to generate this index?
  * @param toolInfo
  *   Information about the tool that produced this index.
  * @param projectRoot
  *   URI-encoded absolute path to the root directory of this index. All
  *   documents in this index must appear in a subdirectory of this root
  *   directory.
  * @param textDocumentEncoding
  *   Text encoding of the source files on disk that are referenced from
  *   `Document.relative_path`.
  */
@SerialVersionUID(0L)
final case class Metadata(
    version: scip.scip.ProtocolVersion = scip.scip.ProtocolVersion.UnspecifiedProtocolVersion,
    toolInfo: _root_.scala.Option[scip.scip.ToolInfo] = _root_.scala.None,
    projectRoot: _root_.scala.Predef.String = "",
    textDocumentEncoding: scip.scip.TextEncoding = scip.scip.TextEncoding.UnspecifiedTextEncoding,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Metadata] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = version.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value)
        }
      };
      if (toolInfo.isDefined) {
        val __value = toolInfo.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = projectRoot
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = textDocumentEncoding.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(4, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = version.value
        if (__v != 0) {
          _output__.writeEnum(1, __v)
        }
      };
      toolInfo.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = projectRoot
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = textDocumentEncoding.value
        if (__v != 0) {
          _output__.writeEnum(4, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withVersion(__v: scip.scip.ProtocolVersion): Metadata = copy(version = __v)
    def getToolInfo: scip.scip.ToolInfo = toolInfo.getOrElse(scip.scip.ToolInfo.defaultInstance)
    def clearToolInfo: Metadata = copy(toolInfo = _root_.scala.None)
    def withToolInfo(__v: scip.scip.ToolInfo): Metadata = copy(toolInfo = Option(__v))
    def withProjectRoot(__v: _root_.scala.Predef.String): Metadata = copy(projectRoot = __v)
    def withTextDocumentEncoding(__v: scip.scip.TextEncoding): Metadata = copy(textDocumentEncoding = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = version.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 2 => toolInfo.orNull
        case 3 => {
          val __t = projectRoot
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = textDocumentEncoding.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(version.scalaValueDescriptor)
        case 2 => toolInfo.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PString(projectRoot)
        case 4 => _root_.scalapb.descriptors.PEnum(textDocumentEncoding.scalaValueDescriptor)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: scip.scip.Metadata.type = scip.scip.Metadata
    // @@protoc_insertion_point(GeneratedMessage[scip.Metadata])
}

object Metadata extends scalapb.GeneratedMessageCompanion[scip.scip.Metadata] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scip.scip.Metadata] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scip.scip.Metadata = {
    var __version: scip.scip.ProtocolVersion = scip.scip.ProtocolVersion.UnspecifiedProtocolVersion
    var __toolInfo: _root_.scala.Option[scip.scip.ToolInfo] = _root_.scala.None
    var __projectRoot: _root_.scala.Predef.String = ""
    var __textDocumentEncoding: scip.scip.TextEncoding = scip.scip.TextEncoding.UnspecifiedTextEncoding
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __version = scip.scip.ProtocolVersion.fromValue(_input__.readEnum())
        case 18 =>
          __toolInfo = Option(__toolInfo.fold(_root_.scalapb.LiteParser.readMessage[scip.scip.ToolInfo](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __projectRoot = _input__.readStringRequireUtf8()
        case 32 =>
          __textDocumentEncoding = scip.scip.TextEncoding.fromValue(_input__.readEnum())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    scip.scip.Metadata(
        version = __version,
        toolInfo = __toolInfo,
        projectRoot = __projectRoot,
        textDocumentEncoding = __textDocumentEncoding,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scip.scip.Metadata] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      scip.scip.Metadata(
        version = scip.scip.ProtocolVersion.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(scip.scip.ProtocolVersion.UnspecifiedProtocolVersion.scalaValueDescriptor).number),
        toolInfo = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[scip.scip.ToolInfo]]),
        projectRoot = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        textDocumentEncoding = scip.scip.TextEncoding.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(scip.scip.TextEncoding.UnspecifiedTextEncoding.scalaValueDescriptor).number)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ScipProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ScipProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = scip.scip.ToolInfo
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => scip.scip.ProtocolVersion
      case 4 => scip.scip.TextEncoding
    }
  }
  lazy val defaultInstance = scip.scip.Metadata(
    version = scip.scip.ProtocolVersion.UnspecifiedProtocolVersion,
    toolInfo = _root_.scala.None,
    projectRoot = "",
    textDocumentEncoding = scip.scip.TextEncoding.UnspecifiedTextEncoding
  )
  implicit class MetadataLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scip.scip.Metadata]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scip.scip.Metadata](_l) {
    def version: _root_.scalapb.lenses.Lens[UpperPB, scip.scip.ProtocolVersion] = field(_.version)((c_, f_) => c_.copy(version = f_))
    def toolInfo: _root_.scalapb.lenses.Lens[UpperPB, scip.scip.ToolInfo] = field(_.getToolInfo)((c_, f_) => c_.copy(toolInfo = Option(f_)))
    def optionalToolInfo: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[scip.scip.ToolInfo]] = field(_.toolInfo)((c_, f_) => c_.copy(toolInfo = f_))
    def projectRoot: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.projectRoot)((c_, f_) => c_.copy(projectRoot = f_))
    def textDocumentEncoding: _root_.scalapb.lenses.Lens[UpperPB, scip.scip.TextEncoding] = field(_.textDocumentEncoding)((c_, f_) => c_.copy(textDocumentEncoding = f_))
  }
  final val VERSION_FIELD_NUMBER = 1
  final val TOOL_INFO_FIELD_NUMBER = 2
  final val PROJECT_ROOT_FIELD_NUMBER = 3
  final val TEXT_DOCUMENT_ENCODING_FIELD_NUMBER = 4
  def of(
    version: scip.scip.ProtocolVersion,
    toolInfo: _root_.scala.Option[scip.scip.ToolInfo],
    projectRoot: _root_.scala.Predef.String,
    textDocumentEncoding: scip.scip.TextEncoding
  ): _root_.scip.scip.Metadata = _root_.scip.scip.Metadata(
    version,
    toolInfo,
    projectRoot,
    textDocumentEncoding
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[scip.Metadata])
}
