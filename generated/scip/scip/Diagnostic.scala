// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scip.scip

/** Represents a diagnostic, such as a compiler error or warning, which should be
  * reported for a document.
  *
  * @param severity
  *   Should this diagnostic be reported as an error, warning, info, or hint?
  * @param code
  *   (optional) Code of this diagnostic, which might appear in the user interface.
  * @param message
  *   Message of this diagnostic.
  * @param source
  *   (optional) Human-readable string describing the source of this diagnostic, e.g.
  *   'typescript' or 'super lint'.
  */
@SerialVersionUID(0L)
final case class Diagnostic(
    severity: scip.scip.Severity = scip.scip.Severity.UnspecifiedSeverity,
    code: _root_.scala.Predef.String = "",
    message: _root_.scala.Predef.String = "",
    source: _root_.scala.Predef.String = "",
    tags: _root_.scala.Seq[scip.scip.DiagnosticTag] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Diagnostic] {
    private[this] def tagsSerializedSize = {
      if (__tagsSerializedSizeField == 0) __tagsSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        tags.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeEnumSizeNoTag(__i.value))
        __s
      }
      __tagsSerializedSizeField
    }
    @transient private[this] var __tagsSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = severity.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value)
        }
      };
      
      {
        val __value = code
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = message
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = source
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      if (tags.nonEmpty) {
        val __localsize = tagsSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = severity.value
        if (__v != 0) {
          _output__.writeEnum(1, __v)
        }
      };
      {
        val __v = code
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = message
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = source
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      if (tags.nonEmpty) {
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(tagsSerializedSize)
        tags.foreach((_output__.writeEnumNoTag _).compose((_: scip.scip.DiagnosticTag).value))
      };
      unknownFields.writeTo(_output__)
    }
    def withSeverity(__v: scip.scip.Severity): Diagnostic = copy(severity = __v)
    def withCode(__v: _root_.scala.Predef.String): Diagnostic = copy(code = __v)
    def withMessage(__v: _root_.scala.Predef.String): Diagnostic = copy(message = __v)
    def withSource(__v: _root_.scala.Predef.String): Diagnostic = copy(source = __v)
    def clearTags = copy(tags = _root_.scala.Seq.empty)
    def addTags(__vs: scip.scip.DiagnosticTag *): Diagnostic = addAllTags(__vs)
    def addAllTags(__vs: Iterable[scip.scip.DiagnosticTag]): Diagnostic = copy(tags = tags ++ __vs)
    def withTags(__v: _root_.scala.Seq[scip.scip.DiagnosticTag]): Diagnostic = copy(tags = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = severity.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 2 => {
          val __t = code
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = message
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = source
          if (__t != "") __t else null
        }
        case 5 => tags.iterator.map(_.javaValueDescriptor).toSeq
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(severity.scalaValueDescriptor)
        case 2 => _root_.scalapb.descriptors.PString(code)
        case 3 => _root_.scalapb.descriptors.PString(message)
        case 4 => _root_.scalapb.descriptors.PString(source)
        case 5 => _root_.scalapb.descriptors.PRepeated(tags.iterator.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: scip.scip.Diagnostic.type = scip.scip.Diagnostic
    // @@protoc_insertion_point(GeneratedMessage[scip.Diagnostic])
}

object Diagnostic extends scalapb.GeneratedMessageCompanion[scip.scip.Diagnostic] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scip.scip.Diagnostic] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scip.scip.Diagnostic = {
    var __severity: scip.scip.Severity = scip.scip.Severity.UnspecifiedSeverity
    var __code: _root_.scala.Predef.String = ""
    var __message: _root_.scala.Predef.String = ""
    var __source: _root_.scala.Predef.String = ""
    val __tags: _root_.scala.collection.immutable.VectorBuilder[scip.scip.DiagnosticTag] = new _root_.scala.collection.immutable.VectorBuilder[scip.scip.DiagnosticTag]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __severity = scip.scip.Severity.fromValue(_input__.readEnum())
        case 18 =>
          __code = _input__.readStringRequireUtf8()
        case 26 =>
          __message = _input__.readStringRequireUtf8()
        case 34 =>
          __source = _input__.readStringRequireUtf8()
        case 40 =>
          __tags += scip.scip.DiagnosticTag.fromValue(_input__.readEnum())
        case 42 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __tags += scip.scip.DiagnosticTag.fromValue(_input__.readEnum())
          }
          _input__.popLimit(oldLimit)
        }
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    scip.scip.Diagnostic(
        severity = __severity,
        code = __code,
        message = __message,
        source = __source,
        tags = __tags.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scip.scip.Diagnostic] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      scip.scip.Diagnostic(
        severity = scip.scip.Severity.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(scip.scip.Severity.UnspecifiedSeverity.scalaValueDescriptor).number),
        code = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        message = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        source = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        tags = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[_root_.scalapb.descriptors.EnumValueDescriptor]]).getOrElse(_root_.scala.Seq.empty).iterator.map(__e => scip.scip.DiagnosticTag.fromValue(__e.number)).toSeq
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ScipProto.javaDescriptor.getMessageTypes().get(10)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ScipProto.scalaDescriptor.messages(10)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => scip.scip.Severity
      case 5 => scip.scip.DiagnosticTag
    }
  }
  lazy val defaultInstance = scip.scip.Diagnostic(
    severity = scip.scip.Severity.UnspecifiedSeverity,
    code = "",
    message = "",
    source = "",
    tags = _root_.scala.Seq.empty
  )
  implicit class DiagnosticLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scip.scip.Diagnostic]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scip.scip.Diagnostic](_l) {
    def severity: _root_.scalapb.lenses.Lens[UpperPB, scip.scip.Severity] = field(_.severity)((c_, f_) => c_.copy(severity = f_))
    def code: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.code)((c_, f_) => c_.copy(code = f_))
    def message: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.message)((c_, f_) => c_.copy(message = f_))
    def source: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.source)((c_, f_) => c_.copy(source = f_))
    def tags: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scip.scip.DiagnosticTag]] = field(_.tags)((c_, f_) => c_.copy(tags = f_))
  }
  final val SEVERITY_FIELD_NUMBER = 1
  final val CODE_FIELD_NUMBER = 2
  final val MESSAGE_FIELD_NUMBER = 3
  final val SOURCE_FIELD_NUMBER = 4
  final val TAGS_FIELD_NUMBER = 5
  def of(
    severity: scip.scip.Severity,
    code: _root_.scala.Predef.String,
    message: _root_.scala.Predef.String,
    source: _root_.scala.Predef.String,
    tags: _root_.scala.Seq[scip.scip.DiagnosticTag]
  ): _root_.scip.scip.Diagnostic = _root_.scip.scip.Diagnostic(
    severity,
    code,
    message,
    source,
    tags
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[scip.Diagnostic])
}
