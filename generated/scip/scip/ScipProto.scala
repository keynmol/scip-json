// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scip.scip

object ScipProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq.empty
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      scip.scip.Index,
      scip.scip.Metadata,
      scip.scip.ToolInfo,
      scip.scip.Document,
      scip.scip.Symbol,
      scip.scip.Package,
      scip.scip.Descriptor,
      scip.scip.SymbolInformation,
      scip.scip.Relationship,
      scip.scip.Occurrence,
      scip.scip.Diagnostic
    )
  private lazy val ProtoBytes: _root_.scala.Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """CgpzY2lwLnByb3RvEgRzY2lwItoBCgVJbmRleBI5CghtZXRhZGF0YRgBIAEoCzIOLnNjaXAuTWV0YWRhdGFCDeI/ChIIbWV0Y
  WRhdGFSCG1ldGFkYXRhEjwKCWRvY3VtZW50cxgCIAMoCzIOLnNjaXAuRG9jdW1lbnRCDuI/CxIJZG9jdW1lbnRzUglkb2N1bWVud
  HMSWAoQZXh0ZXJuYWxfc3ltYm9scxgDIAMoCzIXLnNjaXAuU3ltYm9sSW5mb3JtYXRpb25CFOI/ERIPZXh0ZXJuYWxTeW1ib2xzU
  g9leHRlcm5hbFN5bWJvbHMinwIKCE1ldGFkYXRhEj0KB3ZlcnNpb24YASABKA4yFS5zY2lwLlByb3RvY29sVmVyc2lvbkIM4j8JE
  gd2ZXJzaW9uUgd2ZXJzaW9uEjoKCXRvb2xfaW5mbxgCIAEoCzIOLnNjaXAuVG9vbEluZm9CDeI/ChIIdG9vbEluZm9SCHRvb2xJb
  mZvEjMKDHByb2plY3Rfcm9vdBgDIAEoCUIQ4j8NEgtwcm9qZWN0Um9vdFILcHJvamVjdFJvb3QSYwoWdGV4dF9kb2N1bWVudF9lb
  mNvZGluZxgEIAEoDjISLnNjaXAuVGV4dEVuY29kaW5nQhniPxYSFHRleHREb2N1bWVudEVuY29kaW5nUhR0ZXh0RG9jdW1lbnRFb
  mNvZGluZyJ/CghUb29sSW5mbxIdCgRuYW1lGAEgASgJQgniPwYSBG5hbWVSBG5hbWUSJgoHdmVyc2lvbhgCIAEoCUIM4j8JEgd2Z
  XJzaW9uUgd2ZXJzaW9uEiwKCWFyZ3VtZW50cxgDIAMoCUIO4j8LEglhcmd1bWVudHNSCWFyZ3VtZW50cyL0AQoIRG9jdW1lbnQSK
  QoIbGFuZ3VhZ2UYBCABKAlCDeI/ChIIbGFuZ3VhZ2VSCGxhbmd1YWdlEjYKDXJlbGF0aXZlX3BhdGgYASABKAlCEeI/DhIMcmVsY
  XRpdmVQYXRoUgxyZWxhdGl2ZVBhdGgSRAoLb2NjdXJyZW5jZXMYAiADKAsyEC5zY2lwLk9jY3VycmVuY2VCEOI/DRILb2NjdXJyZ
  W5jZXNSC29jY3VycmVuY2VzEj8KB3N5bWJvbHMYAyADKAsyFy5zY2lwLlN5bWJvbEluZm9ybWF0aW9uQgziPwkSB3N5bWJvbHNSB
  3N5bWJvbHMiqgEKBlN5bWJvbBIjCgZzY2hlbWUYASABKAlCC+I/CBIGc2NoZW1lUgZzY2hlbWUSNQoHcGFja2FnZRgCIAEoCzINL
  nNjaXAuUGFja2FnZUIM4j8JEgdwYWNrYWdlUgdwYWNrYWdlEkQKC2Rlc2NyaXB0b3JzGAMgAygLMhAuc2NpcC5EZXNjcmlwdG9yQ
  hDiPw0SC2Rlc2NyaXB0b3JzUgtkZXNjcmlwdG9ycyJ4CgdQYWNrYWdlEiYKB21hbmFnZXIYASABKAlCDOI/CRIHbWFuYWdlclIHb
  WFuYWdlchIdCgRuYW1lGAIgASgJQgniPwYSBG5hbWVSBG5hbWUSJgoHdmVyc2lvbhgDIAEoCUIM4j8JEgd2ZXJzaW9uUgd2ZXJza
  W9uIukDCgpEZXNjcmlwdG9yEh0KBG5hbWUYASABKAlCCeI/BhIEbmFtZVIEbmFtZRI4Cg1kaXNhbWJpZ3VhdG9yGAIgASgJQhLiP
  w8SDWRpc2FtYmlndWF0b3JSDWRpc2FtYmlndWF0b3ISPAoGc3VmZml4GAMgASgOMhcuc2NpcC5EZXNjcmlwdG9yLlN1ZmZpeEIL4
  j8IEgZzdWZmaXhSBnN1ZmZpeCLDAgoGU3VmZml4Ei0KEVVuc3BlY2lmaWVkU3VmZml4EAAaFuI/ExIRVW5zcGVjaWZpZWRTdWZma
  XgSHQoJTmFtZXNwYWNlEAEaDuI/CxIJTmFtZXNwYWNlEhsKB1BhY2thZ2UQARoOCAHiPwkSB1BhY2thZ2USEwoEVHlwZRACGgniP
  wYSBFR5cGUSEwoEVGVybRADGgniPwYSBFRlcm0SFwoGTWV0aG9kEAQaC+I/CBIGTWV0aG9kEiUKDVR5cGVQYXJhbWV0ZXIQBRoS4
  j8PEg1UeXBlUGFyYW1ldGVyEh0KCVBhcmFtZXRlchAGGg7iPwsSCVBhcmFtZXRlchITCgRNZXRhEAcaCeI/BhIETWV0YRIVCgVMb
  2NhbBAIGgriPwcSBUxvY2FsEhUKBU1hY3JvEAkaCuI/BxIFTWFjcm8aAhABIsABChFTeW1ib2xJbmZvcm1hdGlvbhIjCgZzeW1ib
  2wYASABKAlCC+I/CBIGc3ltYm9sUgZzeW1ib2wSOAoNZG9jdW1lbnRhdGlvbhgDIAMoCUIS4j8PEg1kb2N1bWVudGF0aW9uUg1kb
  2N1bWVudGF0aW9uEkwKDXJlbGF0aW9uc2hpcHMYBCADKAsyEi5zY2lwLlJlbGF0aW9uc2hpcEIS4j8PEg1yZWxhdGlvbnNoaXBzU
  g1yZWxhdGlvbnNoaXBzIqkCCgxSZWxhdGlvbnNoaXASIwoGc3ltYm9sGAEgASgJQgviPwgSBnN5bWJvbFIGc3ltYm9sEjMKDGlzX
  3JlZmVyZW5jZRgCIAEoCEIQ4j8NEgtpc1JlZmVyZW5jZVILaXNSZWZlcmVuY2USQgoRaXNfaW1wbGVtZW50YXRpb24YAyABKAhCF
  eI/EhIQaXNJbXBsZW1lbnRhdGlvblIQaXNJbXBsZW1lbnRhdGlvbhJDChJpc190eXBlX2RlZmluaXRpb24YBCABKAhCFeI/EhIQa
  XNUeXBlRGVmaW5pdGlvblIQaXNUeXBlRGVmaW5pdGlvbhI2Cg1pc19kZWZpbml0aW9uGAUgASgIQhHiPw4SDGlzRGVmaW5pdGlvb
  lIMaXNEZWZpbml0aW9uIuUCCgpPY2N1cnJlbmNlEiAKBXJhbmdlGAEgAygFQgriPwcSBXJhbmdlUgVyYW5nZRIjCgZzeW1ib2wYA
  iABKAlCC+I/CBIGc3ltYm9sUgZzeW1ib2wSMwoMc3ltYm9sX3JvbGVzGAMgASgFQhDiPw0SC3N5bWJvbFJvbGVzUgtzeW1ib2xSb
  2xlcxJRChZvdmVycmlkZV9kb2N1bWVudGF0aW9uGAQgAygJQhriPxcSFW92ZXJyaWRlRG9jdW1lbnRhdGlvblIVb3ZlcnJpZGVEb
  2N1bWVudGF0aW9uEkIKC3N5bnRheF9raW5kGAUgASgOMhAuc2NpcC5TeW50YXhLaW5kQg/iPwwSCnN5bnRheEtpbmRSCnN5bnRhe
  EtpbmQSRAoLZGlhZ25vc3RpY3MYBiADKAsyEC5zY2lwLkRpYWdub3N0aWNCEOI/DRILZGlhZ25vc3RpY3NSC2RpYWdub3N0aWNzI
  ucBCgpEaWFnbm9zdGljEjkKCHNldmVyaXR5GAEgASgOMg4uc2NpcC5TZXZlcml0eUIN4j8KEghzZXZlcml0eVIIc2V2ZXJpdHkSH
  QoEY29kZRgCIAEoCUIJ4j8GEgRjb2RlUgRjb2RlEiYKB21lc3NhZ2UYAyABKAlCDOI/CRIHbWVzc2FnZVIHbWVzc2FnZRIjCgZzb
  3VyY2UYBCABKAlCC+I/CBIGc291cmNlUgZzb3VyY2USMgoEdGFncxgFIAMoDjITLnNjaXAuRGlhZ25vc3RpY1RhZ0IJ4j8GEgR0Y
  WdzUgR0YWdzKlIKD1Byb3RvY29sVmVyc2lvbhI/ChpVbnNwZWNpZmllZFByb3RvY29sVmVyc2lvbhAAGh/iPxwSGlVuc3BlY2lma
  WVkUHJvdG9jb2xWZXJzaW9uKnUKDFRleHRFbmNvZGluZxI5ChdVbnNwZWNpZmllZFRleHRFbmNvZGluZxAAGhziPxkSF1Vuc3BlY
  2lmaWVkVGV4dEVuY29kaW5nEhMKBFVURjgQARoJ4j8GEgRVVEY4EhUKBVVURjE2EAIaCuI/BxIFVVRGMTYq9QEKClN5bWJvbFJvb
  GUSNQoVVW5zcGVjaWZpZWRTeW1ib2xSb2xlEAAaGuI/FxIVVW5zcGVjaWZpZWRTeW1ib2xSb2xlEh8KCkRlZmluaXRpb24QARoP4
  j8MEgpEZWZpbml0aW9uEhcKBkltcG9ydBACGgviPwgSBkltcG9ydBIhCgtXcml0ZUFjY2VzcxAEGhDiPw0SC1dyaXRlQWNjZXNzE
  h8KClJlYWRBY2Nlc3MQCBoP4j8MEgpSZWFkQWNjZXNzEh0KCUdlbmVyYXRlZBAQGg7iPwsSCUdlbmVyYXRlZBITCgRUZXN0ECAaC
  eI/BhIEVGVzdCrfDQoKU3ludGF4S2luZBI1ChVVbnNwZWNpZmllZFN5bnRheEtpbmQQABoa4j8XEhVVbnNwZWNpZmllZFN5bnRhe
  EtpbmQSGQoHQ29tbWVudBABGgziPwkSB0NvbW1lbnQSMwoUUHVuY3R1YXRpb25EZWxpbWl0ZXIQAhoZ4j8WEhRQdW5jdHVhdGlvb
  kRlbGltaXRlchIvChJQdW5jdHVhdGlvbkJyYWNrZXQQAxoX4j8UEhJQdW5jdHVhdGlvbkJyYWNrZXQSGQoHS2V5d29yZBAEGgziP
  wkSB0tleXdvcmQSLwoRSWRlbnRpZmllcktleXdvcmQQBBoYCAHiPxMSEUlkZW50aWZpZXJLZXl3b3JkEi8KEklkZW50aWZpZXJPc
  GVyYXRvchAFGhfiPxQSEklkZW50aWZpZXJPcGVyYXRvchIfCgpJZGVudGlmaWVyEAYaD+I/DBIKSWRlbnRpZmllchItChFJZGVud
  GlmaWVyQnVpbHRpbhAHGhbiPxMSEUlkZW50aWZpZXJCdWlsdGluEicKDklkZW50aWZpZXJOdWxsEAgaE+I/EBIOSWRlbnRpZmllc
  k51bGwSLwoSSWRlbnRpZmllckNvbnN0YW50EAkaF+I/FBISSWRlbnRpZmllckNvbnN0YW50EjkKF0lkZW50aWZpZXJNdXRhYmxlR
  2xvYmFsEAoaHOI/GRIXSWRlbnRpZmllck11dGFibGVHbG9iYWwSMQoTSWRlbnRpZmllclBhcmFtZXRlchALGhjiPxUSE0lkZW50a
  WZpZXJQYXJhbWV0ZXISKQoPSWRlbnRpZmllckxvY2FsEAwaFOI/ERIPSWRlbnRpZmllckxvY2FsEi8KEklkZW50aWZpZXJTaGFkb
  3dlZBANGhfiPxQSEklkZW50aWZpZXJTaGFkb3dlZBIxChNJZGVudGlmaWVyTmFtZXNwYWNlEA4aGOI/FRITSWRlbnRpZmllck5hb
  WVzcGFjZRItChBJZGVudGlmaWVyTW9kdWxlEA4aFwgB4j8SEhBJZGVudGlmaWVyTW9kdWxlEi8KEklkZW50aWZpZXJGdW5jdGlvb
  hAPGhfiPxQSEklkZW50aWZpZXJGdW5jdGlvbhJDChxJZGVudGlmaWVyRnVuY3Rpb25EZWZpbml0aW9uEBAaIeI/HhIcSWRlbnRpZ
  mllckZ1bmN0aW9uRGVmaW5pdGlvbhIpCg9JZGVudGlmaWVyTWFjcm8QERoU4j8REg9JZGVudGlmaWVyTWFjcm8SPQoZSWRlbnRpZ
  mllck1hY3JvRGVmaW5pdGlvbhASGh7iPxsSGUlkZW50aWZpZXJNYWNyb0RlZmluaXRpb24SJwoOSWRlbnRpZmllclR5cGUQExoT4
  j8QEg5JZGVudGlmaWVyVHlwZRI1ChVJZGVudGlmaWVyQnVpbHRpblR5cGUQFBoa4j8XEhVJZGVudGlmaWVyQnVpbHRpblR5cGUSM
  QoTSWRlbnRpZmllckF0dHJpYnV0ZRAVGhjiPxUSE0lkZW50aWZpZXJBdHRyaWJ1dGUSIQoLUmVnZXhFc2NhcGUQFhoQ4j8NEgtSZ
  WdleEVzY2FwZRIlCg1SZWdleFJlcGVhdGVkEBcaEuI/DxINUmVnZXhSZXBlYXRlZBIlCg1SZWdleFdpbGRjYXJkEBgaEuI/DxINU
  mVnZXhXaWxkY2FyZBInCg5SZWdleERlbGltaXRlchAZGhPiPxASDlJlZ2V4RGVsaW1pdGVyEh0KCVJlZ2V4Sm9pbhAaGg7iPwsSC
  VJlZ2V4Sm9pbhIlCg1TdHJpbmdMaXRlcmFsEBsaEuI/DxINU3RyaW5nTGl0ZXJhbBIxChNTdHJpbmdMaXRlcmFsRXNjYXBlEBwaG
  OI/FRITU3RyaW5nTGl0ZXJhbEVzY2FwZRIzChRTdHJpbmdMaXRlcmFsU3BlY2lhbBAdGhniPxYSFFN0cmluZ0xpdGVyYWxTcGVja
  WFsEisKEFN0cmluZ0xpdGVyYWxLZXkQHhoV4j8SEhBTdHJpbmdMaXRlcmFsS2V5EisKEENoYXJhY3RlckxpdGVyYWwQHxoV4j8SE
  hBDaGFyYWN0ZXJMaXRlcmFsEicKDk51bWVyaWNMaXRlcmFsECAaE+I/EBIOTnVtZXJpY0xpdGVyYWwSJwoOQm9vbGVhbkxpdGVyY
  WwQIRoT4j8QEg5Cb29sZWFuTGl0ZXJhbBIRCgNUYWcQIhoI4j8FEgNUYWcSIwoMVGFnQXR0cmlidXRlECMaEeI/DhIMVGFnQXR0c
  mlidXRlEiMKDFRhZ0RlbGltaXRlchAkGhHiPw4SDFRhZ0RlbGltaXRlchoCEAEqpwEKCFNldmVyaXR5EjEKE1Vuc3BlY2lmaWVkU
  2V2ZXJpdHkQABoY4j8VEhNVbnNwZWNpZmllZFNldmVyaXR5EhUKBUVycm9yEAEaCuI/BxIFRXJyb3ISGQoHV2FybmluZxACGgziP
  wkSB1dhcm5pbmcSIQoLSW5mb3JtYXRpb24QAxoQ4j8NEgtJbmZvcm1hdGlvbhITCgRIaW50EAQaCeI/BhIESGludCqQAQoNRGlhZ
  25vc3RpY1RhZxI7ChhVbnNwZWNpZmllZERpYWdub3N0aWNUYWcQABod4j8aEhhVbnNwZWNpZmllZERpYWdub3N0aWNUYWcSIQoLV
  W5uZWNlc3NhcnkQARoQ4j8NEgtVbm5lY2Vzc2FyeRIfCgpEZXByZWNhdGVkEAIaD+I/DBIKRGVwcmVjYXRlZCqUEgoITGFuZ3VhZ
  2USMQoTVW5zcGVjaWZpZWRMYW5ndWFnZRAAGhjiPxUSE1Vuc3BlY2lmaWVkTGFuZ3VhZ2USEwoEQUJBUBA8GgniPwYSBEFCQVASE
  QoDQVBMEDEaCOI/BRIDQVBMEhEKA0FkYRAnGgjiPwUSA0FkYRITCgRBZ2RhEC0aCeI/BhIEQWdkYRIbCghBc2NpaURvYxBWGg3iP
  woSCEFzY2lpRG9jEhsKCEFzc2VtYmx5EDoaDeI/ChIIQXNzZW1ibHkSEQoDQXdrEEIaCOI/BRIDQXdrEhEKA0JhdBBEGgjiPwUSA
  0JhdBIXCgZCaWJUZVgQURoL4j8IEgZCaWJUZVgSDQoBQxAiGgbiPwMSAUMSFQoFQ09CT0wQOxoK4j8HEgVDT0JPTBIRCgNDUFAQI
  xoI4j8FEgNDUFASEQoDQ1NTEBoaCOI/BRIDQ1NTEhcKBkNTaGFycBABGgviPwgSBkNTaGFycBIZCgdDbG9qdXJlEAgaDOI/CRIHQ
  2xvanVyZRIjCgxDb2ZmZWVzY3JpcHQQFRoR4j8OEgxDb2ZmZWVzY3JpcHQSHwoKQ29tbW9uTGlzcBAJGg/iPwwSCkNvbW1vbkxpc
  3ASEQoDQ29xEC8aCOI/BRIDQ29xEhMKBERhcnQQAxoJ4j8GEgREYXJ0EhcKBkRlbHBoaRA5GgviPwgSBkRlbHBoaRITCgREaWZmE
  FgaCeI/BhIERGlmZhIfCgpEb2NrZXJmaWxlEFAaD+I/DBIKRG9ja2VyZmlsZRIXCgZEeWFsb2cQMhoL4j8IEgZEeWFsb2cSFwoGR
  WxpeGlyEBEaC+I/CBIGRWxpeGlyEhcKBkVybGFuZxASGgviPwgSBkVybGFuZxIXCgZGU2hhcnAQKhoL4j8IEgZGU2hhcnASEwoER
  mlzaBBBGgniPwYSBEZpc2gSEwoERmxvdxAYGgniPwYSBEZsb3cSGQoHRm9ydHJhbhA4GgziPwkSB0ZvcnRyYW4SHwoKR2l0X0Nvb
  W1pdBBbGg/iPwwSCkdpdF9Db21taXQSHwoKR2l0X0NvbmZpZxBZGg/iPwwSCkdpdF9Db25maWcSHwoKR2l0X1JlYmFzZRBcGg/iP
  wwSCkdpdF9SZWJhc2USDwoCR28QIRoH4j8EEgJHbxIXCgZHcm9vdnkQBxoL4j8IEgZHcm9vdnkSEwoESFRNTBAeGgniPwYSBEhUT
  UwSEwoESGFjaxAUGgniPwYSBEhhY2sSHwoKSGFuZGxlYmFycxBaGg/iPwwSCkhhbmRsZWJhcnMSGQoHSGFza2VsbBAsGgziPwkSB
  0hhc2tlbGwSFQoFSWRyaXMQLhoK4j8HEgVJZHJpcxIRCgNJbmkQSBoI4j8FEgNJbmkSDQoBShAzGgbiPwMSAUoSEwoESlNPThBLG
  gniPwYSBEpTT04SEwoESmF2YRAGGgniPwYSBEphdmESHwoKSmF2YVNjcmlwdBAWGg/iPwwSCkphdmFTY3JpcHQSKQoPSmF2YVNjc
  mlwdFJlYWN0EF0aFOI/ERIPSmF2YVNjcmlwdFJlYWN0EhkKB0pzb25uZXQQTBoM4j8JEgdKc29ubmV0EhUKBUp1bGlhEDcaCuI/B
  xIFSnVsaWESFwoGS290bGluEAQaC+I/CBIGS290bGluEhUKBUxhVGVYEFMaCuI/BxIFTGFUZVgSEwoETGVhbhAwGgniPwYSBExlY
  W4SEwoETGVzcxAbGgniPwYSBExlc3MSEQoDTHVhEAwaCOI/BRIDTHVhEhsKCE1ha2VmaWxlEE8aDeI/ChIITWFrZWZpbGUSGwoIT
  WFya2Rvd24QVBoN4j8KEghNYXJrZG93bhIXCgZNYXRsYWIQNBoL4j8IEgZNYXRsYWISEQoDTml4EE0aCOI/BRIDTml4EhUKBU9DY
  W1sECkaCuI/BxIFT0NhbWwSIQoLT2JqZWN0aXZlX0MQJBoQ4j8NEgtPYmplY3RpdmVfQxIlCg1PYmplY3RpdmVfQ1BQECUaEuI/D
  xINT2JqZWN0aXZlX0NQUBIRCgNQSFAQExoI4j8FEgNQSFASFQoFUExTUUwQRhoK4j8HEgVQTFNRTBITCgRQZXJsEA0aCeI/BhIEU
  GVybBIfCgpQb3dlclNoZWxsEEMaD+I/DBIKUG93ZXJTaGVsbBIXCgZQcm9sb2cQRxoL4j8IEgZQcm9sb2cSFwoGUHl0aG9uEA8aC
  +I/CBIGUHl0aG9uEg0KAVIQNhoG4j8DEgFSEhcKBlJhY2tldBALGgviPwgSBlJhY2tldBITCgRSYWt1EA4aCeI/BhIEUmFrdRIVC
  gVSYXpvchA+GgriPwcSBVJhem9yEhMKBFJlU1QQVRoJ4j8GEgRSZVNUEhMKBFJ1YnkQEBoJ4j8GEgRSdWJ5EhMKBFJ1c3QQKBoJ4
  j8GEgRSdXN0EhEKA1NBUxA9GgjiPwUSA1NBUxITCgRTQ1NTEB0aCeI/BhIEU0NTUxIRCgNTTUwQKxoI4j8FEgNTTUwSEQoDU1FME
  EUaCOI/BRIDU1FMEhMKBFNhc3MQHBoJ4j8GEgRTYXNzEhUKBVNjYWxhEAUaCuI/BxIFU2NhbGESFwoGU2NoZW1lEAoaC+I/CBIGU
  2NoZW1lEiEKC1NoZWxsU2NyaXB0EEAaEOI/DRILU2hlbGxTY3JpcHQSGQoHU2t5bGFyaxBOGgziPwkSB1NreWxhcmsSFQoFU3dpZ
  nQQAhoK4j8HEgVTd2lmdBITCgRUT01MEEkaCeI/BhIEVE9NTBIRCgNUZVgQUhoI4j8FEgNUZVgSHwoKVHlwZVNjcmlwdBAXGg/iP
  wwSClR5cGVTY3JpcHQSKQoPVHlwZVNjcmlwdFJlYWN0EF4aFOI/ERIPVHlwZVNjcmlwdFJlYWN0EiEKC1Zpc3VhbEJhc2ljED8aE
  OI/DRILVmlzdWFsQmFzaWMSEQoDVnVlEBkaCOI/BRIDVnVlEhkKB1dvbGZyYW0QNRoM4j8JEgdXb2xmcmFtEhEKA1hNTBAfGgjiP
  wUSA1hNTBIRCgNYU0wQIBoI4j8FEgNYU0wSEwoEWUFNTBBKGgniPwYSBFlBTUwSEQoDWmlnECYaCOI/BRIDWmlnQi9aLWdpdGh1Y
  i5jb20vc291cmNlZ3JhcGgvc2NpcC9iaW5kaW5ncy9nby9zY2lwL2IGcHJvdG8z"""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, _root_.scala.Array(
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}