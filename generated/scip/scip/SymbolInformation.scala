// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scip.scip

/** SymbolInformation defines metadata about a symbol, such as the symbol's
  * docstring or what package it's defined it.
  *
  * @param symbol
  *   Identifier of this symbol, which can be referenced from `Occurence.symbol`.
  *   The string must be formatted according to the grammar in `Symbol`.
  * @param documentation
  *   (optional, but strongly recommended) The markdown-formatted documentation
  *   for this symbol. This field is repeated to allow different kinds of
  *   documentation.  For example, it's nice to include both the signature of a
  *   method (parameters and return type) along with the accompanying docstring.
  * @param relationships
  *   (optional) Relationships to other symbols (e.g., implements, type definition).
  */
@SerialVersionUID(0L)
final case class SymbolInformation(
    symbol: _root_.scala.Predef.String = "",
    documentation: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    relationships: _root_.scala.Seq[scip.scip.Relationship] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SymbolInformation] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = symbol
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      documentation.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      }
      relationships.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = symbol
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      documentation.foreach { __v =>
        val __m = __v
        _output__.writeString(3, __m)
      };
      relationships.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withSymbol(__v: _root_.scala.Predef.String): SymbolInformation = copy(symbol = __v)
    def clearDocumentation = copy(documentation = _root_.scala.Seq.empty)
    def addDocumentation(__vs: _root_.scala.Predef.String *): SymbolInformation = addAllDocumentation(__vs)
    def addAllDocumentation(__vs: Iterable[_root_.scala.Predef.String]): SymbolInformation = copy(documentation = documentation ++ __vs)
    def withDocumentation(__v: _root_.scala.Seq[_root_.scala.Predef.String]): SymbolInformation = copy(documentation = __v)
    def clearRelationships = copy(relationships = _root_.scala.Seq.empty)
    def addRelationships(__vs: scip.scip.Relationship *): SymbolInformation = addAllRelationships(__vs)
    def addAllRelationships(__vs: Iterable[scip.scip.Relationship]): SymbolInformation = copy(relationships = relationships ++ __vs)
    def withRelationships(__v: _root_.scala.Seq[scip.scip.Relationship]): SymbolInformation = copy(relationships = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = symbol
          if (__t != "") __t else null
        }
        case 3 => documentation
        case 4 => relationships
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(symbol)
        case 3 => _root_.scalapb.descriptors.PRepeated(documentation.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(relationships.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: scip.scip.SymbolInformation.type = scip.scip.SymbolInformation
    // @@protoc_insertion_point(GeneratedMessage[scip.SymbolInformation])
}

object SymbolInformation extends scalapb.GeneratedMessageCompanion[scip.scip.SymbolInformation] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scip.scip.SymbolInformation] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scip.scip.SymbolInformation = {
    var __symbol: _root_.scala.Predef.String = ""
    val __documentation: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __relationships: _root_.scala.collection.immutable.VectorBuilder[scip.scip.Relationship] = new _root_.scala.collection.immutable.VectorBuilder[scip.scip.Relationship]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __symbol = _input__.readStringRequireUtf8()
        case 26 =>
          __documentation += _input__.readStringRequireUtf8()
        case 34 =>
          __relationships += _root_.scalapb.LiteParser.readMessage[scip.scip.Relationship](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    scip.scip.SymbolInformation(
        symbol = __symbol,
        documentation = __documentation.result(),
        relationships = __relationships.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scip.scip.SymbolInformation] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      scip.scip.SymbolInformation(
        symbol = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        documentation = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        relationships = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[scip.scip.Relationship]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ScipProto.javaDescriptor.getMessageTypes().get(7)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ScipProto.scalaDescriptor.messages(7)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = scip.scip.Relationship
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scip.scip.SymbolInformation(
    symbol = "",
    documentation = _root_.scala.Seq.empty,
    relationships = _root_.scala.Seq.empty
  )
  implicit class SymbolInformationLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scip.scip.SymbolInformation]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scip.scip.SymbolInformation](_l) {
    def symbol: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.symbol)((c_, f_) => c_.copy(symbol = f_))
    def documentation: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.documentation)((c_, f_) => c_.copy(documentation = f_))
    def relationships: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scip.scip.Relationship]] = field(_.relationships)((c_, f_) => c_.copy(relationships = f_))
  }
  final val SYMBOL_FIELD_NUMBER = 1
  final val DOCUMENTATION_FIELD_NUMBER = 3
  final val RELATIONSHIPS_FIELD_NUMBER = 4
  def of(
    symbol: _root_.scala.Predef.String,
    documentation: _root_.scala.Seq[_root_.scala.Predef.String],
    relationships: _root_.scala.Seq[scip.scip.Relationship]
  ): _root_.scip.scip.SymbolInformation = _root_.scip.scip.SymbolInformation(
    symbol,
    documentation,
    relationships
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[scip.SymbolInformation])
}
