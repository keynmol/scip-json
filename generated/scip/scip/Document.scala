// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package scip.scip

/** Document defines the metadata about a source file on disk.
  *
  * @param language
  *   The string ID for the programming language this file is written in.
  *   The `Language` enum contains the names of most common programming languages.
  *   This field is typed as a string to permit any programming langauge, including
  *   ones that are not specified by the `Language` enum.
  * @param relativePath
  *   (Required) Unique path to the text document.
  *  
  *   1. The path must be relative to the directory supplied in the associated
  *      `Metadata.project_root`.
  *   2. The path must not begin with a leading '/'.
  *   3. The path must point to a regular file, not a symbolic link.
  *   4. The path must use '/' as the separator, including on Windows.
  *   5. The path must be canonical; it cannot include empty components ('//'),
  *      or '.' or '..'.
  * @param occurrences
  *   Occurrences that appear in this file.
  * @param symbols
  *   Symbols that are "defined" within this document.
  *  
  *   This should include symbols which technically do not have any definition,
  *   but have a reference and are defined by some other symbol (see
  *   Relationship.is_definition).
  */
@SerialVersionUID(0L)
final case class Document(
    language: _root_.scala.Predef.String = "",
    relativePath: _root_.scala.Predef.String = "",
    occurrences: _root_.scala.Seq[scip.scip.Occurrence] = _root_.scala.Seq.empty,
    symbols: _root_.scala.Seq[scip.scip.SymbolInformation] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Document] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = language
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = relativePath
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      occurrences.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      symbols.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = relativePath
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      occurrences.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      symbols.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = language
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withLanguage(__v: _root_.scala.Predef.String): Document = copy(language = __v)
    def withRelativePath(__v: _root_.scala.Predef.String): Document = copy(relativePath = __v)
    def clearOccurrences = copy(occurrences = _root_.scala.Seq.empty)
    def addOccurrences(__vs: scip.scip.Occurrence *): Document = addAllOccurrences(__vs)
    def addAllOccurrences(__vs: Iterable[scip.scip.Occurrence]): Document = copy(occurrences = occurrences ++ __vs)
    def withOccurrences(__v: _root_.scala.Seq[scip.scip.Occurrence]): Document = copy(occurrences = __v)
    def clearSymbols = copy(symbols = _root_.scala.Seq.empty)
    def addSymbols(__vs: scip.scip.SymbolInformation *): Document = addAllSymbols(__vs)
    def addAllSymbols(__vs: Iterable[scip.scip.SymbolInformation]): Document = copy(symbols = symbols ++ __vs)
    def withSymbols(__v: _root_.scala.Seq[scip.scip.SymbolInformation]): Document = copy(symbols = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 4 => {
          val __t = language
          if (__t != "") __t else null
        }
        case 1 => {
          val __t = relativePath
          if (__t != "") __t else null
        }
        case 2 => occurrences
        case 3 => symbols
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 4 => _root_.scalapb.descriptors.PString(language)
        case 1 => _root_.scalapb.descriptors.PString(relativePath)
        case 2 => _root_.scalapb.descriptors.PRepeated(occurrences.iterator.map(_.toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PRepeated(symbols.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: scip.scip.Document.type = scip.scip.Document
    // @@protoc_insertion_point(GeneratedMessage[scip.Document])
}

object Document extends scalapb.GeneratedMessageCompanion[scip.scip.Document] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[scip.scip.Document] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): scip.scip.Document = {
    var __language: _root_.scala.Predef.String = ""
    var __relativePath: _root_.scala.Predef.String = ""
    val __occurrences: _root_.scala.collection.immutable.VectorBuilder[scip.scip.Occurrence] = new _root_.scala.collection.immutable.VectorBuilder[scip.scip.Occurrence]
    val __symbols: _root_.scala.collection.immutable.VectorBuilder[scip.scip.SymbolInformation] = new _root_.scala.collection.immutable.VectorBuilder[scip.scip.SymbolInformation]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 34 =>
          __language = _input__.readStringRequireUtf8()
        case 10 =>
          __relativePath = _input__.readStringRequireUtf8()
        case 18 =>
          __occurrences += _root_.scalapb.LiteParser.readMessage[scip.scip.Occurrence](_input__)
        case 26 =>
          __symbols += _root_.scalapb.LiteParser.readMessage[scip.scip.SymbolInformation](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    scip.scip.Document(
        language = __language,
        relativePath = __relativePath,
        occurrences = __occurrences.result(),
        symbols = __symbols.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[scip.scip.Document] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      scip.scip.Document(
        language = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        relativePath = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        occurrences = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[scip.scip.Occurrence]]).getOrElse(_root_.scala.Seq.empty),
        symbols = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[scip.scip.SymbolInformation]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ScipProto.javaDescriptor.getMessageTypes().get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ScipProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = scip.scip.Occurrence
      case 3 => __out = scip.scip.SymbolInformation
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = scip.scip.Document(
    language = "",
    relativePath = "",
    occurrences = _root_.scala.Seq.empty,
    symbols = _root_.scala.Seq.empty
  )
  implicit class DocumentLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, scip.scip.Document]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, scip.scip.Document](_l) {
    def language: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.language)((c_, f_) => c_.copy(language = f_))
    def relativePath: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.relativePath)((c_, f_) => c_.copy(relativePath = f_))
    def occurrences: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scip.scip.Occurrence]] = field(_.occurrences)((c_, f_) => c_.copy(occurrences = f_))
    def symbols: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[scip.scip.SymbolInformation]] = field(_.symbols)((c_, f_) => c_.copy(symbols = f_))
  }
  final val LANGUAGE_FIELD_NUMBER = 4
  final val RELATIVE_PATH_FIELD_NUMBER = 1
  final val OCCURRENCES_FIELD_NUMBER = 2
  final val SYMBOLS_FIELD_NUMBER = 3
  def of(
    language: _root_.scala.Predef.String,
    relativePath: _root_.scala.Predef.String,
    occurrences: _root_.scala.Seq[scip.scip.Occurrence],
    symbols: _root_.scala.Seq[scip.scip.SymbolInformation]
  ): _root_.scip.scip.Document = _root_.scip.scip.Document(
    language,
    relativePath,
    occurrences,
    symbols
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[scip.Document])
}
